--- SoundManager.java
+++ SoundManager.java
@@ -8,6 +8,7 @@
 import java.util.Random;
 import paulscode.sound.SoundSystem;
+import net.minecraft.client.Minecraft;
 
-public class SoundManager {
+public final class SoundManager {
     private SoundSystem sndSystem;
     private SoundPool soundPoolSounds;
@@ -15,8 +16,10 @@
     private SoundPool soundPoolMusic;
     private int playerSoundsCount;
-    private GameSettings gameSettings;
     private boolean loaded;
     private Random rand;
     private int ticksBeforeMusic;
+
+    private int soundVolume = 100;
+    private int musicVolume = 100;
     
     public SoundManager() {
@@ -28,29 +31,41 @@
         this.rand = new Random();
         this.ticksBeforeMusic = this.rand.nextInt(12000);
+
+        if (Minecraft.INSTANCE.gameSettings != null) {
+            setMusicVolume((int) Minecraft.INSTANCE.gameSettings.getOption("music").getValue());
+            setSoundVolume((int) Minecraft.INSTANCE.gameSettings.getOption("sound").getValue());
+        }
     }
     
-    public void loadSoundSettings(final GameSettings gameSettings) {
+    public void loadSoundSettings(final SoundManager previous) {
         this.soundPoolStreaming.isGetRandomSound = false;
-        this.gameSettings = gameSettings;
-        if (!this.loaded && (gameSettings == null || gameSettings.soundVolume || gameSettings.musicVolume)) {
-            this.tryToSetLibraryAndCodecs();
+        if (previous == null) {
+            if (Minecraft.INSTANCE.gameSettings != null) {
+                setMusicVolume((int) Minecraft.INSTANCE.gameSettings.getOption("music").getValue());
+                setSoundVolume((int) Minecraft.INSTANCE.gameSettings.getOption("sound").getValue());
+            }
         }
+        else {
+            setMusicVolume(previous.musicVolume);
+            setSoundVolume(previous.soundVolume);
+        }
+        onSoundOptionsChanged();
     }
     
     private void tryToSetLibraryAndCodecs() {
         try {
-            final boolean soundVolume = this.gameSettings.soundVolume;
-            final boolean musicVolume = this.gameSettings.musicVolume;
-            this.gameSettings.soundVolume = false;
-            this.gameSettings.musicVolume = false;
-            this.gameSettings.saveOptions();
+            //final boolean soundVolume = this.gameSettings.soundVolume;
+            //final boolean musicVolume = this.gameSettings.musicVolume;
+            //this.gameSettings.soundVolume = false;
+            //this.gameSettings.musicVolume = false;
+            //this.gameSettings.saveOptions();
             SoundSystemConfig.addLibrary(LibraryLWJGLOpenAL.class);
-            SoundSystemConfig.setCodec("ogg", (Class)CodecJOrbis.class);
-            SoundSystemConfig.setCodec("mus", (Class)CodecMus.class);
-            SoundSystemConfig.setCodec("wav", (Class)CodecWav.class);
+            SoundSystemConfig.setCodec("ogg", CodecJOrbis.class);
+            SoundSystemConfig.setCodec("mus", CodecMus.class);
+            SoundSystemConfig.setCodec("wav", CodecWav.class);
             this.sndSystem = new SoundSystem();
-            this.gameSettings.soundVolume = soundVolume;
-            this.gameSettings.musicVolume = musicVolume;
-            this.gameSettings.saveOptions();
+            //this.gameSettings.soundVolume = soundVolume;
+            //this.gameSettings.musicVolume = musicVolume;
+            //this.gameSettings.saveOptions();
         }
         catch (Throwable t) {
@@ -62,10 +77,13 @@
     
     public void onSoundOptionsChanged() {
-        if (!this.loaded && (this.gameSettings.soundVolume || this.gameSettings.musicVolume)) {
+        if (!this.loaded && (soundVolume > 0 || musicVolume > 0)) {
             this.tryToSetLibraryAndCodecs();
         }
-        if (!this.gameSettings.musicVolume) {
+        if (musicVolume == 0) {
             this.sndSystem.stop("BgMusic");
         }
+        else {
+            this.sndSystem.setVolume("BgMusic", musicVolume / 100.0f);
+        }
     }
     
@@ -89,5 +107,5 @@
     
     public void playRandomMusicIfReady() {
-        if (!this.loaded || !this.gameSettings.musicVolume) {
+        if (!this.loaded || musicVolume == 0) {
             return;
         }
@@ -106,33 +124,28 @@
     }
     
-    public void setListener(final EntityLiving ge, final float float2) {
-        if (!this.loaded || !this.gameSettings.soundVolume) {
+    public void setListener(final EntityLiving target, final float distance) {
+        if (!this.loaded || soundVolume == 0) {
             return;
         }
-        if (ge == null) {
+        if (target == null) {
             return;
         }
-        final float n = ge.prevRotationYaw + (ge.rotationYaw - ge.prevRotationYaw) * float2;
-        final double n2 = ge.prevPosX + (ge.posX - ge.prevPosX) * float2;
-        final double n3 = ge.prevPosY + (ge.posY - ge.prevPosY) * float2;
-        final double n4 = ge.prevPosZ + (ge.posZ - ge.prevPosZ) * float2;
-        final float cos = MathHelper.cos(-n * 0.017453292f - 3.1415927f);
-        final float float3 = -MathHelper.sin(-n * 0.017453292f - 3.1415927f);
-        final float float4 = 0.0f;
-        final float float5 = -cos;
-        final float float6 = 0.0f;
-        final float float7 = 1.0f;
-        final float float8 = 0.0f;
-        this.sndSystem.setListenerPosition((float)n2, (float)n3, (float)n4);
-        this.sndSystem.setListenerOrientation(float3, 0.0f, float5, 0.0f, 1.0f, 0.0f);
+        final float angle = target.prevRotationYaw + (target.rotationYaw - target.prevRotationYaw) * distance;
+        final double lx = target.prevPosX + (target.posX - target.prevPosX) * distance;
+        final double ly = target.prevPosY + (target.posY - target.prevPosY) * distance;
+        final double lz = target.prevPosZ + (target.posZ - target.prevPosZ) * distance;
+        final float lookX = -MathHelper.sin(-angle * 0.017453292f - (float) Math.PI);
+        final float lookZ = -MathHelper.cos(-angle * 0.017453292f - (float) Math.PI);
+        this.sndSystem.setListenerPosition((float)lx, (float)ly, (float)lz);
+        this.sndSystem.setListenerOrientation(lookX, 0.0f, lookZ, 0.0f, 1.0f, 0.0f);
     }
     
     public void playStreaming(final String string, final float float2, final float float3, final float float4, final float float5, final float float6) {
-        if (!this.loaded || !this.gameSettings.soundVolume) {
+        if (!this.loaded || soundVolume == 0) {
             return;
         }
-        final String string2 = "streaming";
-        if (this.sndSystem.playing("streaming")) {
-            this.sndSystem.stop("streaming");
+        final String name = "streaming" + Math.round(float2) + ":" + Math.round(float3) + ":" + Math.round(float4);
+        if (this.sndSystem.playing(name)) {
+            this.sndSystem.stop(name);
         }
         if (string == null) {
@@ -144,12 +157,12 @@
                 this.sndSystem.stop("BgMusic");
             }
-            this.sndSystem.newStreamingSource(true, "streaming", randomSoundFromSoundPool.soundUrl, randomSoundFromSoundPool.soundName, false, float2, float3, float4, 2, 64.0f);
-            this.sndSystem.setVolume("streaming", 0.5f);
-            this.sndSystem.play("streaming");
+            this.sndSystem.newStreamingSource(true, name, randomSoundFromSoundPool.soundUrl, randomSoundFromSoundPool.soundName, false, float2, float3, float4, 2, 64.0f);
+            this.sndSystem.setVolume(name, 0.5f * (musicVolume / 100.0f));
+            this.sndSystem.play(name);
         }
     }
     
     public void playSound(final String string, final float float2, final float float3, final float float4, float float5, final float float6) {
-        if (!this.loaded || !this.gameSettings.soundVolume) {
+        if (!this.loaded || soundVolume == 0) {
             return;
         }
@@ -167,11 +180,11 @@
                 float5 = 1.0f;
             }
-            this.sndSystem.setVolume(string2, float5);
+            this.sndSystem.setVolume(string2, float5 * (soundVolume / 100.0f));
             this.sndSystem.play(string2);
         }
     }
     
-    public void playSoundFX(final String string, float float2, final float float3) {
-        if (!this.loaded || !this.gameSettings.soundVolume) {
+    public void playSoundFX(final String string, float volume, final float float3) {
+        if (!this.loaded || soundVolume == 0) {
             return;
         }
@@ -181,12 +194,28 @@
             final String string2 = new StringBuilder().append("sound_").append(this.playerSoundsCount).toString();
             this.sndSystem.newSource(false, string2, randomSoundFromSoundPool.soundUrl, randomSoundFromSoundPool.soundName, false, 0.0f, 0.0f, 0.0f, 0, 0.0f);
-            if (float2 > 1.0f) {
-                float2 = 1.0f;
+            if (volume > 1.0f) {
+                volume = 1.0f;
             }
-            float2 *= 0.25f;
+            volume *= 0.25f;
             this.sndSystem.setPitch(string2, float3);
-            this.sndSystem.setVolume(string2, float2);
+            this.sndSystem.setVolume(string2, volume * (soundVolume / 100.0f));
             this.sndSystem.play(string2);
         }
     }
+
+    public void setSoundVolume(int volume) {
+        soundVolume = volume;
+    }
+
+    public void setMusicVolume(int volume) {
+        musicVolume = volume;
+    }
+
+    public int getSoundVolume() {
+        return soundVolume;
+    }
+
+    public int getMusicVolume() {
+        return musicVolume;
+    }
 }

--- RenderGlobal.java
+++ RenderGlobal.java
@@ -60,6 +60,6 @@
     
     public RenderGlobal(final Minecraft minecraft, final RenderEngine renderEngine) {
-        this.tileEntities = (List<TileEntity>)new ArrayList();
-        this.worldRenderersToUpdate = (List<WorldRenderer>)new ArrayList();
+        this.tileEntities = new ArrayList<>();
+        this.worldRenderersToUpdate = new ArrayList<>();
         this.occlusionEnabled = false;
         this.cloudTickCounter = 0;
@@ -68,5 +68,5 @@
         this.dummyBuf50k = new int[50000];
         this.occlusionResult = GLAllocation.createDirectIntBuffer(64);
-        this.glRenderLists = (List<WorldRenderer>)new ArrayList();
+        this.glRenderLists = new ArrayList<>();
         this.allRenderLists = new RenderList[] { new RenderList(), new RenderList(), new RenderList(), new RenderList() };
         this.dummyRenderInt = 0;
@@ -98,8 +98,8 @@
             for (int j = -384; j <= 384; j += 64) {
                 instance.startDrawingQuads();
-                instance.addVertex(i + 0, 16.0, j + 0);
-                instance.addVertex(i + 64, 16.0, j + 0);
+                instance.addVertex(i, 16.0, j);
+                instance.addVertex(i + 64, 16.0, j);
                 instance.addVertex(i + 64, 16.0, j + 64);
-                instance.addVertex(i + 0, 16.0, j + 64);
+                instance.addVertex(i, 16.0, j + 64);
                 instance.draw();
             }
@@ -110,7 +110,7 @@
         for (int k = -384; k <= 384; k += 64) {
             for (int l = -384; l <= 384; l += 64) {
-                instance.addVertex(k + 64, -16.0, l + 0);
-                instance.addVertex(k + 0, -16.0, l + 0);
-                instance.addVertex(k + 0, -16.0, l + 64);
+                instance.addVertex(k + 64, -16.0, l);
+                instance.addVertex(k, -16.0, l);
+                instance.addVertex(k, -16.0, l + 64);
                 instance.addVertex(k + 64, -16.0, l + 64);
             }
@@ -181,6 +181,6 @@
         this.renderDistance = this.mc.gameSettings.renderDistance;
         if (this.worldRenderers != null) {
-            for (int i = 0; i < this.worldRenderers.length; ++i) {
-                this.worldRenderers[i].stopRendering();
+            for (WorldRenderer worldRenderer : this.worldRenderers) {
+                worldRenderer.stopRendering();
             }
         }
@@ -202,6 +202,6 @@
         this.maxBlockY = this.renderChunksTall;
         this.maxBlockZ = this.renderChunksDeep;
-        for (int j = 0; j < this.worldRenderersToUpdate.size(); ++j) {
-            ((WorldRenderer)this.worldRenderersToUpdate.get(j)).needsUpdate = false;
+        for (WorldRenderer worldRenderer : this.worldRenderersToUpdate) {
+            worldRenderer.needsUpdate = false;
         }
         this.worldRenderersToUpdate.clear();
@@ -228,5 +228,9 @@
             final EntityPlayerSP thePlayer = this.mc.thePlayer;
             this.markRenderersForNewPosition(MathHelper.floor_double(thePlayer.posX), MathHelper.floor_double(thePlayer.posY), MathHelper.floor_double(thePlayer.posZ));
-            Arrays.sort((Object[])this.sortedWorldRenderers, (Comparator)new EntitySorter(thePlayer));
+            try {
+                Arrays.sort(this.sortedWorldRenderers, new EntitySorter(thePlayer));
+            } catch (IllegalArgumentException ignored) {
+                System.out.println("NOT THIS TIME TIMOTHY");
+            }
         }
         this.renderEntitiesStartupCounter = 2;
@@ -252,22 +256,23 @@
         final List<Entity> loadedEntityList = this.theWorld.getLoadedEntityList();
         this.countEntitiesTotal = loadedEntityList.size();
-        for (int i = 0; i < loadedEntityList.size(); ++i) {
-            final Entity entity = (Entity)loadedEntityList.get(i);
-            if (entity.isInRangeToRenderVec3D(vector) && camera.isBoundingBoxInFrustum(entity.boundingBox) && (entity != this.mc.thePlayer || this.mc.gameSettings.thirdPersonView)) {
+        for (Entity value : loadedEntityList) {
+            if (value.isInRangeToRenderVec3D(vector) && camera.isBoundingBoxInFrustum(value.boundingBox) && (value != this.mc.thePlayer || this.mc.gameSettings.thirdPersonView)) {
                 ++this.countEntitiesRendered;
-                RenderManager.instance.renderEntity(entity, renderPartialTick);
+                RenderManager.instance.renderEntity(value, renderPartialTick);
             }
         }
-        for (int i = 0; i < this.tileEntities.size(); ++i) {
-            TileEntityRenderer.instance.renderTileEntity((TileEntity)this.tileEntities.get(i), renderPartialTick);
+        for (TileEntity tileEntity : this.tileEntities) {
+            TileEntityRenderer.instance.renderTileEntity(tileEntity, renderPartialTick);
         }
     }
     
     public String getDebugInfoRenders() {
-        return new StringBuilder().append("C: ").append(this.renderersBeingRendered).append("/").append(this.renderersLoaded).append(". F: ").append(this.renderersBeingClipped).append(", O: ").append(this.renderersBeingOccluded).append(", E: ").append(this.renderersSkippingRenderPass).toString();
+        return "C: §6" + this.renderersBeingRendered + "§r/§e" + this.renderersLoaded + "§r. F: §c"
+                + this.renderersBeingClipped + "§r, O: §8" + this.renderersBeingOccluded + "§r, E: §7" + this.renderersSkippingRenderPass;
     }
     
     public String getDebugInfoEntities() {
-        return new StringBuilder().append("E: ").append(this.countEntitiesRendered).append("/").append(this.countEntitiesTotal).append(". B: ").append(this.countEntitiesHidden).append(", I: ").append(this.countEntitiesTotal - this.countEntitiesHidden - this.countEntitiesRendered).toString();
+        return "E: §9" + this.countEntitiesRendered + "§r/§b" + this.countEntitiesTotal + "§r. B: §8"
+                + this.countEntitiesHidden + "§r, I: §7" + (this.countEntitiesTotal - this.countEntitiesHidden - this.countEntitiesRendered);
     }
     
@@ -351,5 +356,9 @@
             this.prevSortZ = entityPlayer.posZ;
             this.markRenderersForNewPosition(MathHelper.floor_double(entityPlayer.posX), MathHelper.floor_double(entityPlayer.posY), MathHelper.floor_double(entityPlayer.posZ));
-            Arrays.sort((Object[])this.sortedWorldRenderers, (Comparator)new EntitySorter(entityPlayer));
+            try {
+                Arrays.sort(this.sortedWorldRenderers, new EntitySorter(entityPlayer));
+            } catch (IllegalArgumentException e) {
+                System.out.println("NOT THIS TIME TIMOTHY");
+            }
         }
         int n7;
@@ -360,5 +369,5 @@
                 this.sortedWorldRenderers[j].isVisible = true;
             }
-            n7 = 0 + this.renderSortedRenderers(0, i, integer, double3);
+            n7 = this.renderSortedRenderers(0, i, integer, double3);
             do {
                 final int j = i;
@@ -420,5 +429,5 @@
         }
         else {
-            n7 = 0 + this.renderSortedRenderers(0, this.sortedWorldRenderers.length, integer, double3);
+            n7 = this.renderSortedRenderers(0, this.sortedWorldRenderers.length, integer, double3);
         }
         return n7;
@@ -459,5 +468,6 @@
                 }
             }
-            if (!this.sortedWorldRenderers[i].skipRenderPass[integer3] && this.sortedWorldRenderers[i].isInFrustum && this.sortedWorldRenderers[i].isVisible && this.sortedWorldRenderers[i].getGLCallListForPass(integer3) >= 0) {
+            if (!this.sortedWorldRenderers[i].skipRenderPass[integer3] && this.sortedWorldRenderers[i].isInFrustum &&
+                    this.sortedWorldRenderers[i].isVisible && this.sortedWorldRenderers[i].getGLCallListForPass(integer3) >= 0) {
                 this.glRenderLists.add(this.sortedWorldRenderers[i]);
                 ++n;
@@ -469,12 +479,11 @@
         final double playerZ = thePlayer.lastTickPosZ + (thePlayer.posZ - thePlayer.lastTickPosZ) * double4;
         int n2 = 0;
-        for (int j = 0; j < this.allRenderLists.length; ++j) {
-            this.allRenderLists[j].reset();
+        for (RenderList allRenderList : this.allRenderLists) {
+            allRenderList.reset();
         }
-        for (int j = 0; j < this.glRenderLists.size(); ++j) {
-            final WorldRenderer worldRenderer = (WorldRenderer)this.glRenderLists.get(j);
+        for (WorldRenderer glRenderList : this.glRenderLists) {
             int n3 = -1;
             for (int k = 0; k < n2; ++k) {
-                if (this.allRenderLists[k].isRenderedAt(worldRenderer.posXMinus, worldRenderer.posYMinus, worldRenderer.posZMinus)) {
+                if (this.allRenderLists[k].isRenderedAt(glRenderList.posXMinus, glRenderList.posYMinus, glRenderList.posZMinus)) {
                     n3 = k;
                 }
@@ -482,7 +491,7 @@
             if (n3 < 0) {
                 n3 = n2++;
-                this.allRenderLists[n3].setLocation(worldRenderer.posXMinus, worldRenderer.posYMinus, worldRenderer.posZMinus, playerX, playerY, playerZ);
+                this.allRenderLists[n3].setLocation(glRenderList.posXMinus, glRenderList.posYMinus, glRenderList.posZMinus, playerX, playerY, playerZ);
             }
-            this.allRenderLists[n3].render(worldRenderer.getGLCallListForPass(integer3));
+            this.allRenderLists[n3].render(glRenderList.getGLCallListForPass(integer3));
         }
         this.renderAllRenderLists(integer3, double4);
@@ -491,6 +500,6 @@
     
     public void renderAllRenderLists(final int integer, final double double2) {
-        for (int i = 0; i < this.allRenderLists.length; ++i) {
-            this.allRenderLists[i].render();
+        for (RenderList allRenderList : this.allRenderLists) {
+            allRenderList.render();
         }
     }
@@ -720,5 +729,5 @@
     public boolean updateRenderers(final EntityPlayer entityPlayer, final boolean boolean2) {
         try {
-            Collections.sort((List)this.worldRenderersToUpdate, (Comparator)new RenderSorter(entityPlayer));
+            this.worldRenderersToUpdate.sort(new RenderSorter(entityPlayer));
         }
         catch (IllegalArgumentException ex) {
@@ -727,5 +736,5 @@
         final int n = this.worldRenderersToUpdate.size() - 1;
         for (int size = this.worldRenderersToUpdate.size(), i = 0; i < size; ++i) {
-            final WorldRenderer worldRenderer = (WorldRenderer)this.worldRenderersToUpdate.get(n - i);
+            final WorldRenderer worldRenderer = this.worldRenderersToUpdate.get(n - i);
             if (!boolean2) {
                 if (worldRenderer.distanceToEntitySquared(entityPlayer) > 1024.0f) {
@@ -891,5 +900,5 @@
     public void playRecord(final String record, final int x, final int y, final int z) {
         if (record != null) {
-            this.mc.ingameGUI.setRecordPlayingMessage(new StringBuilder("C418 - ").append(record).toString());
+            this.mc.ingameGUI.setRecordPlayingMessage("[5] - " + record);
         }
         this.mc.sndManager.playStreaming(record, (float)x, (float)y, (float)z, 1.0f, 1.0f);
@@ -958,10 +967,10 @@
     
     public void updateAllRenderers() {
-        for (int i = 0; i < this.worldRenderers.length; ++i) {
-            if (this.worldRenderers[i].isChunkLit) {
-                if (!this.worldRenderers[i].needsUpdate) {
-                    this.worldRenderersToUpdate.add(this.worldRenderers[i]);
+        for (WorldRenderer worldRenderer : this.worldRenderers) {
+            if (worldRenderer.isChunkLit) {
+                if (!worldRenderer.needsUpdate) {
+                    this.worldRenderersToUpdate.add(worldRenderer);
                 }
-                this.worldRenderers[i].markDirty();
+                worldRenderer.markDirty();
             }
         }

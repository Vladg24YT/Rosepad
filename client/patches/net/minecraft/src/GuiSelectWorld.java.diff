--- GuiSelectWorld.java
+++ GuiSelectWorld.java
@@ -2,5 +2,10 @@
 
 import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+
 import net.minecraft.client.Minecraft;
+import org.lwjgl.input.Mouse;
 
 public class GuiSelectWorld extends GuiScreen {
@@ -8,52 +13,97 @@
     protected String screenTitle;
     private boolean selected;
-    
+    int scroll = 0;
+    private boolean flag;
+    int mouseX = 0;
+    int mouseY = 0;
+    int putButtonsFor = -1;
+
+    private File[] notNullOrDefault(File[] files) {
+        if (files == null) {
+            return new File[0];
+        }
+        return files;
+    }
+
+    private static class SelectableWorld {
+        private final String dirname;
+
+        private SelectableWorld(String dirname) {
+            this.dirname = dirname;
+        }
+
+        public String getDirname() {
+            return dirname;
+        }
+    }
+
+    private final List<SelectableWorld> worlds = new ArrayList<>();
+
     public GuiSelectWorld(final GuiScreen screen) {
         this.screenTitle = "Select world";
         this.selected = false;
         this.parentScreen = screen;
+
+        flag = !Mouse.getEventButtonState();
+
+        refresh();
     }
-    
+
+    public void refresh() {
+        worlds.clear();
+        File saves = new File(Minecraft.getMinecraftDir(), "saves");
+        for (File save : notNullOrDefault(saves.listFiles())) {
+            String worldName = save.getName();
+            worlds.add(new SelectableWorld(worldName));
+        }
+    }
+
     @Override
     public void actionPerformed() {
-        final File minecraftDir = Minecraft.getMinecraftDir();
-        for (int i = 0; i < 5; ++i) {
-            final NBTTagCompound levelData = World.getLevelData(minecraftDir, new StringBuilder().append("World").append(i + 1).toString());
-            if (levelData == null) {
-                this.controlList.add(new GuiButton(i, this.width / 2 - 100, this.height / 6 + 24 * i, "- empty -"));
-            }
-            else {
-                this.controlList.add(new GuiButton(i, this.width / 2 - 100, this.height / 6 + 24 * i, String.valueOf((Object)new StringBuilder().append("World ").append(i + 1).toString()) + " (" + levelData.getLong("SizeOnDisk") / 1024L * 100L / 1024L / 100.0f + " MB)"));
-            }
+        controlList.clear();
+        this.controlList.add(new GuiSmallButton(0, this.width / 2 - 170, this.height - 30, "Back"));
+        this.controlList.add(new GuiSmallButton(1, this.width / 2 + 20, this.height - 30, "New"));
+        if (putButtonsFor != -1) {
+            final int y = 40 - scroll + putButtonsFor * 70;
+            this.controlList.add(new GuiButton(2, this.width / 2 + 115, y + 25, 40, 20, "Del"));
         }
-        this.initButtons();
     }
-    
+
     protected String getSaveName(final int worldNum) {
         return (World.getLevelData(Minecraft.getMinecraftDir(), new StringBuilder().append("World").append(worldNum).toString()) != null) ? new StringBuilder().append("World").append(worldNum).toString() : null;
     }
-    
-    public void initButtons() {
-        this.controlList.add(new GuiButton(5, this.width / 2 - 100, this.height / 6 + 120 + 12, "Delete world..."));
-        this.controlList.add(new GuiButton(6, this.width / 2 - 100, this.height / 6 + 168, "Cancel"));
-    }
-    
+
     @Override
     protected void actionPerformed(final GuiButton button) {
-        if (!button.enabled) {
-            return;
+        flag = false;
+        switch (button.id) {
+            case 0:
+                mc.displayGuiScreen(parentScreen);
+                break;
+            case 1:
+                mc.displayGuiScreen(new GuiCreateWorld(this));
+                break;
+            case 2:
+            {
+                SelectableWorld world = worlds.get(putButtonsFor);
+                this.mc.displayGuiScreen(new GuiYesNo(this, "Are you sure you want to delete this world?", "'" + world.getDirname() + "' will be lost forever!", world.getDirname()));
+            }
+                break;
         }
-        if (button.id < 5) {
-            this.selectWorld(button.id + 1);
-        }
-        else if (button.id == 5) {
-            this.mc.displayGuiScreen(new GuiDeleteWorld(this));
-        }
-        else if (button.id == 6) {
-            this.mc.displayGuiScreen(this.parentScreen);
-        }
+        //if (!button.enabled) {
+        //    return;
+        //}
+        //if (button.id < 5) {
+        //    this.selectWorld(button.id + 1);
+        //}
+        //else if (button.id == 5) {
+        //    this.mc.displayGuiScreen(new GuiDeleteWorld(this));
+        //}
+        //else if (button.id == 6) {
+        //    this.mc.displayGuiScreen(this.parentScreen);
+        //}
     }
-    
-    public void selectWorld(final int worldNum) {
+
+    public void selectWorld(SelectableWorld world) {
         this.mc.displayGuiScreen(null);
         if (this.selected) {
@@ -62,12 +112,78 @@
         this.selected = true;
         this.mc.playerController = new PlayerControllerSP(this.mc);
-        this.mc.startWorld(new StringBuilder().append("World").append(worldNum).toString());
+        for (int i = 0; i < 6; i++) {
+            try {
+                this.mc.startWorld(world.getDirname());
+                break;
+            } catch (Exception e) {
+                e.printStackTrace();
+            }
+        }
         this.mc.displayGuiScreen(null);
     }
-    
+
     @Override
+    public void handleMouseInput() {
+        int dw;
+        if ((dw = Mouse.getDWheel()) != 0) {
+            dw /= -20;
+            scroll += dw;
+            if (scroll < 0) scroll = 0;
+            if (controlList.size() > 2) {
+                final int y = 40 - scroll + putButtonsFor * 70;
+                GuiButton button = controlList.get(2);
+                button.yPosition = y + 25;
+            }
+        }
+
+        super.handleMouseInput();
+        if (flag && Mouse.getEventButton() == 0 && Mouse.getEventButtonState()) {
+            SelectableWorld clicked = null;
+
+            int i = 0;
+            for (final SelectableWorld world : worlds) {
+                final int y = 40 - scroll + i * 70;
+                if (mouseX >= width / 2 - 160 && mouseX <= width / 2 + 160
+                    && mouseY >= y && mouseY <= y + 50) {
+                    clicked = world;
+                }
+                i++;
+            }
+
+            if (clicked != null) {
+                selectWorld(clicked);
+            }
+        }
+        flag = !Mouse.getEventButtonState();
+    }
+
+    @Override
     public void drawScreen(final int mouseX, final int mouseY, final float renderPartialTick) {
+        this.mouseX = mouseX;
+        this.mouseY = mouseY;
+
         this.drawDefaultBackground();
-        this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 16777215);
+
+        int selected = -1;
+        int i = 0;
+        for (final SelectableWorld world : worlds) {
+            final int y = 40 - scroll + i * 70;
+            int color = 0xAA000000;
+            if (mouseX >= width / 2 - 160 && mouseX <= width / 2 + 160
+                && mouseY >= y && mouseY <= y + 50) {
+                color = 0xAA444444;
+                selected = i;
+            }
+            drawRect(width / 2 - 160, y, width / 2 + 160, y + 50, color);
+            drawString(fontRenderer, world.getDirname(), width / 2 - 100, y + 10, 0xFFFFFF);
+            i++;
+        }
+        if (putButtonsFor != selected) {
+            putButtonsFor = selected;
+            actionPerformed();
+        }
+
+        this.drawCenteredString(this.fontRenderer, this.screenTitle, this.width / 2, 20, 0xFFFFFF);
+
         super.drawScreen(mouseX, mouseY, renderPartialTick);
     }

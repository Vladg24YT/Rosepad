import java.nio.file.*

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.brambolt.gradle.patching' version '2022.05.01-7057'
}

repositories {
    mavenCentral()
}

dependencies {
    shadow project(":rml")
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'
}

group 'net.buj'
version '1.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

abstract class DeletePatches extends DefaultTask {

    @Input
    String rmPath = "none";

    static def rm(Path path) {
        File file = new File(path.toString())
        if (file.isDirectory()) {
            for (File sf : file.listFiles()) {
                rm(sf.toPath())
            }
        }
        file.delete()
    }

    @TaskAction
    def delete() {
        rm(Paths.get(rmPath))
    }
}

abstract class InjectClasses extends DefaultTask {

    @Input
    String source = "none";
    @Input
    String dest = "none";

    static def cp(Path source, Path dest) {
        File file = new File(source.toString())
        if (file.isDirectory()) {
            dest.toFile().mkdirs()
            for (String sf : file.list()) {
                cp(source.resolve(sf), dest.resolve(sf))
            }
        }
        else if (file.isFile()) {
            Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING)
        }
    }

    @TaskAction
    def copy() {
        cp(Paths.get(source), Paths.get(dest))
    }
}

abstract class CreateInjectClasses extends DefaultTask {

    @Input
    String source = "none";
    @Input
    String orig = "none";
    @Input
    String dest = "none";

    static def cpIfMissing(Path source, Path check, Path dest) {
        File file = source.toFile()
        if (file.isDirectory()) {
            for (String sf : file.list()) {
                cpIfMissing(source.resolve(sf), check.resolve(sf), dest.resolve(sf))
            }
        }
        else if (file.isFile() && !check.toFile().exists()) {
            dest.parent.toFile().mkdirs();
            Files.copy(source, dest, StandardCopyOption.REPLACE_EXISTING)
        }
    }

    static def rm(Path path) {
        File file = new File(path.toString())
        if (file.isDirectory()) {
            for (File sf : file.listFiles()) {
                rm(sf.toPath())
            }
        }
        file.delete()
    }

    @TaskAction
    def copy() {
        rm(Paths.get(dest))
        cpIfMissing(Paths.get(source), Paths.get(orig), Paths.get(dest))
    }
}

FileCollection getLilypadClasspath(FileCollection originalCollection, String libraryFolder) {
    File libFolder = new File(libraryFolder)

    ArrayList<File> finalList = libFolder.listFiles()

    // Remove files from libFolder that original already has
    for (File libraryFile : libFolder.listFiles()) {
        for (File classpathFile in originalCollection.getFiles()) {
            if (!finalList.contains(classpathFile)) {
                finalList.add(classpathFile) // for src/main/java and src/main/resources
            }
        }
    }

    return files(finalList)
}

static List<String> getRunJVMArgs(String allocatedMemory) {
    List<String> jvmArgs = new ArrayList<String>()
    jvmArgs.add("-Xmx" + allocatedMemory)
    jvmArgs.add("-Xms" + allocatedMemory)
    return jvmArgs
}

static String makeAndGetDir(String dir) {
    File directory = new File(dir)

    if (!directory.exists()) {
        directory.mkdir()

        File properties = new File(dir, "server.properties")
        properties.createNewFile()

        FileWriter writer = new FileWriter(properties)
        writer.write("online-mode=false") // Disable online mode for test server
        writer.close()
    }

    return directory.getPath()
}

String mainServerClass = "net.minecraft.server.MinecraftServer"
String libraryPath = "${projectDir}/../libs/"

tasks.register("deletePatches", DeletePatches) {
    rmPath = "${projectDir}/patches"
}

tasks.register("injectClasses", InjectClasses) {
    source = "${projectDir}/inject"
    dest = "${projectDir}/src/main/java"
}

tasks.register("ejectClasses", CreateInjectClasses) {
    source = "${projectDir}/src/main/java"
    orig = "${projectDir}/src/orig/java"
    dest = "${projectDir}/inject"
}

//task runServer (type: JavaExec) {
//    mainClass = mainServerClass
//    classpath = getLilypadClasspath(sourceSets.main.runtimeClasspath, libraryPath)
//    argsString = "nogui"
//    jvmArgs = getRunJVMArgs("2048M")
//    workingDir = makeAndGetDir("${projectDir}/run/")
//    jvmArgs = { HOME = "${projectDir}/run/" }

//    dependsOn ""
//}

processPatches {
    content = "${projectDir}/src/orig/java"
    patches = "${projectDir}/patches"
    destination = "${projectDir}/src/main/java"
}

createPatches {
    content = "${projectDir}/src/orig/java"
    modified = "${projectDir}/src/main/java"
    destination = "${projectDir}/patches"

    dependsOn tasks.named("deletePatches").get()
}

jar {
    manifest {
        attributes "Main-Class": mainServerClass
    }
}

tasks.named("compileJava") {
    dependsOn("processPatches", "injectClasses")
}

shadowJar {
    dependsOn "injectClasses"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}
